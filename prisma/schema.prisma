// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String   @unique
  passwordHash String   @map("password_hash")
  name         String
  userType     UserType @default(INDIVIDUAL) @map("user_type")
  plan         Plan     @default(FREE)
  apiQuota     Int      @default(1000) @map("api_quota")
  apiUsage     Int      @default(0) @map("api_usage")
  pricingTier  PricingTier @default(STANDARD) @map("pricing_tier")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  apiResources  ApiResource[]
  apiKeys       ApiKey[]
  subscriptions Subscription[]

  @@map("users")
}

model Category {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String   @unique
  description String?
  icon        String?
  parentId    String?  @map("parent_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")

  parent       Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]    @relation("CategoryHierarchy")
  apiResources ApiResource[]

  @@map("categories")
}

model ApiResource {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String       @map("user_id") @db.Uuid
  name         String
  slug         String       @unique
  description  String?
  resourceType ResourceType @default(BUSINESS) @map("resource_type")
  categoryId   String       @map("category_id") @db.Uuid
  
  // Address
  addressLine1 String? @map("address_line1")
  addressLine2 String? @map("address_line2")
  city         String?
  region       String?
  postalCode   String? @map("postal_code")
  country      String  @default("CM")
  latitude     Decimal? @db.Decimal(10, 8)
  longitude    Decimal? @db.Decimal(11, 8)
  
  // Contact
  phone   String?
  email   String?
  website String?
  
  // Business info
  status    ResourceStatus @default(PENDING)
  plan      ResourcePlan   @default(FREE)
  verified  Boolean        @default(false)
  
  // SEO
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description")
  
  // Audit
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  publishedAt DateTime? @map("published_at")
  deletedAt   DateTime? @map("deleted_at")

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category          @relation(fields: [categoryId], references: [id])
  hours           BusinessHour[]
  images          ResourceImage[]
  analyticsEvents AnalyticsEvent[]

  @@index([categoryId])
  @@index([latitude, longitude])
  @@index([status, plan])
  @@index([createdAt(sort: Desc)])
  @@map("api_resources")
}

model BusinessHour {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resourceId   String  @map("resource_id") @db.Uuid
  dayOfWeek    Int     @map("day_of_week")
  openTime     String? @map("open_time")
  closeTime    String? @map("close_time")
  isClosed     Boolean @default(false) @map("is_closed")

  resource ApiResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([resourceId, dayOfWeek], map: "resourceId_dayOfWeek")
  @@map("business_hours")
}

model ResourceImage {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resourceId String   @map("resource_id") @db.Uuid
  url        String
  altText    String?  @map("alt_text")
  isPrimary  Boolean  @default(false) @map("is_primary")
  orderIndex Int      @default(0) @map("order_index")
  createdAt  DateTime @default(now()) @map("created_at")

  resource ApiResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@map("resource_images")
}

model ApiKey {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String
  keyHash     String    @map("key_hash")
  keyPrefix   String    @map("key_prefix")
  permissions Json      @default("[]")
  rateLimit   Int       @default(1000) @map("rate_limit")
  isActive    Boolean   @default(true) @map("is_active")
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@map("api_keys")
}

model AnalyticsEvent {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resourceId String   @map("resource_id") @db.Uuid
  eventType  String   @map("event_type")
  userAgent  String?  @map("user_agent")
  ipAddress  String?  @map("ip_address") @db.Inet
  referrer   String?
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now()) @map("created_at")

  resource ApiResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId, createdAt(sort: Desc)])
  @@map("analytics_events")
}

model Subscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  plan      Plan
  status    SubscriptionStatus @default(ACTIVE)
  startDate DateTime @default(now()) @map("start_date")
  endDate   DateTime? @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum UserType {
  INDIVIDUAL
  BUSINESS
  ADMIN
}

enum Plan {
  FREE
  PRO
  PREMIUM
  ENTERPRISE
}

enum PricingTier {
  STANDARD
  BUSINESS
  ENTERPRISE
}

enum ResourceType {
  BUSINESS
  SERVICE
  DATA
  API
}

enum ResourceStatus {
  ACTIVE
  PENDING
  SUSPENDED
}

enum ResourcePlan {
  FREE
  PREMIUM
  FEATURED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}
