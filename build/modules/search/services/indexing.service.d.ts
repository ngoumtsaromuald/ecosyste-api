import { Queue } from 'bull';
import { ConfigService } from '@nestjs/config';
import { PrismaService } from '../../../config/prisma.service';
import { IIndexingService, QueueStats } from '../interfaces/indexing.interface';
import { IndexHealth } from '../interfaces/search.interfaces';
export declare class IndexingService implements IIndexingService {
    private readonly indexingQueue;
    private readonly configService;
    private readonly prisma;
    private readonly logger;
    private readonly elasticsearch;
    constructor(indexingQueue: Queue, configService: ConfigService, prisma: PrismaService);
    queueIndexResource(resourceId: string, resourceType: string, data: any): Promise<void>;
    queueUpdateResource(resourceId: string, resourceType: string, data: any): Promise<void>;
    queueDeleteResource(resourceId: string, resourceType: string): Promise<void>;
    queueReindexAll(): Promise<void>;
    indexResource(resourceId: string, resourceType: string, data: any): Promise<void>;
    updateResource(resourceId: string, resourceType: string, data: any): Promise<void>;
    deleteResource(resourceId: string, resourceType: string): Promise<void>;
    checkConnection(): Promise<boolean>;
    getClusterInfo(): Promise<any>;
    processIndexJob(job: any): Promise<void>;
    processUpdateJob(job: any): Promise<void>;
    processDeleteJob(job: any): Promise<void>;
    processReindexJob(job: any): Promise<void>;
    reindexAll(): Promise<void>;
    checkIndexHealth(): Promise<IndexHealth>;
    getQueueStats(): Promise<QueueStats>;
    clearQueue(): Promise<void>;
    private getJobPriority;
    private getIndexName;
    private transformResourceForIndex;
    private transformApiResource;
    private transformEnterpriseResource;
    private transformServiceResource;
    private transformResourceForReindexing;
    private mapResourceTypeToString;
    private formatBytes;
}
