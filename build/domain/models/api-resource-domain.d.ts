import { ResourceType, ResourceStatus, ResourcePlan } from '../enums';
import { Address, Contact, SeoData } from '../value-objects';
export declare class ApiResourceDomain {
    readonly id: string;
    readonly userId: string;
    readonly name: string;
    readonly slug: string;
    readonly description: string | null;
    readonly resourceType: ResourceType;
    readonly categoryId: string;
    readonly address: Address | null;
    readonly contact: Contact | null;
    readonly status: ResourceStatus;
    readonly plan: ResourcePlan;
    readonly verified: boolean;
    readonly seo: SeoData | null;
    readonly createdAt: Date;
    readonly updatedAt: Date;
    readonly publishedAt: Date | null;
    readonly deletedAt: Date | null;
    constructor(id: string, userId: string, name: string, slug: string, description: string | null, resourceType: ResourceType, categoryId: string, address: Address | null, contact: Contact | null, status: ResourceStatus, plan: ResourcePlan, verified: boolean, seo: SeoData | null, createdAt: Date, updatedAt: Date, publishedAt: Date | null, deletedAt: Date | null);
    static create(data: {
        id: string;
        userId: string;
        name: string;
        slug?: string;
        description?: string | null;
        resourceType: ResourceType;
        categoryId: string;
        address?: Address | null;
        contact?: Contact | null;
        status?: ResourceStatus;
        plan?: ResourcePlan;
        verified?: boolean;
        seo?: SeoData | null;
        createdAt?: Date;
        updatedAt?: Date;
        publishedAt?: Date | null;
        deletedAt?: Date | null;
    }): ApiResourceDomain;
    isPublished(): boolean;
    canBeUpdatedBy(userId: string): boolean;
    canBePublished(): boolean;
    isDeleted(): boolean;
    isPremium(): boolean;
    requiresApproval(): boolean;
    validate(): string[];
    static generateSlug(name: string): string;
    regenerateSlug(): ApiResourceDomain;
    withName(name: string): ApiResourceDomain;
    withSlug(slug: string): ApiResourceDomain;
    withStatus(status: ResourceStatus): ApiResourceDomain;
    withPlan(plan: ResourcePlan): ApiResourceDomain;
    withVerified(verified: boolean): ApiResourceDomain;
    markAsDeleted(): ApiResourceDomain;
    private isValidSlug;
    equals(other: ApiResourceDomain): boolean;
    toString(): string;
}
