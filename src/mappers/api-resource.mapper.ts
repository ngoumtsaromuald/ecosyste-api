import { ApiResource, Category, BusinessHour, ResourceImage } from '@prisma/client';
import { Decimal } from '@prisma/client/runtime/library';
import { ApiResourceDomain } from '../domain/models';
import { 
  CreateApiResourceDto, 
  UpdateApiResourceDto, 
  ApiResourceResponseDto 
} from '../dto';
import { AddressMapper } from './address.mapper';
import { ContactMapper } from './contact.mapper';
import { SeoDataMapper } from './seo-data.mapper';
import { BusinessHourMapper } from './business-hour.mapper';
import { ResourceImageMapper } from './resource-image.mapper';
import { CategoryMapper } from './category.mapper';

type ApiResourceWithRelations = ApiResource & {
  category: Category;
  hours?: BusinessHour[];
  images?: ResourceImage[];
};

export class ApiResourceMapper {
  static toDomain(prismaResource: ApiResource): ApiResourceDomain {
    const address = prismaResource.addressLine1 || prismaResource.city 
      ? AddressMapper.fromPrisma({
          addressLine1: prismaResource.addressLine1,
          addressLine2: prismaResource.addressLine2,
          city: prismaResource.city,
          region: prismaResource.region,
          postalCode: prismaResource.postalCode,
          country: prismaResource.country,
          latitude: prismaResource.latitude,
          longitude: prismaResource.longitude,
        })
      : null;

    const contact = prismaResource.phone || prismaResource.email || prismaResource.website
      ? ContactMapper.fromPrisma({
          phone: prismaResource.phone,
          email: prismaResource.email,
          website: prismaResource.website,
        })
      : null;

    const seo = prismaResource.metaTitle || prismaResource.metaDescription
      ? SeoDataMapper.fromPrisma({
          metaTitle: prismaResource.metaTitle,
          metaDescription: prismaResource.metaDescription,
        })
      : null;

    return ApiResourceDomain.create({
      id: prismaResource.id,
      userId: prismaResource.userId,
      name: prismaResource.name,
      slug: prismaResource.slug,
      description: prismaResource.description,
      resourceType: prismaResource.resourceType as any,
      categoryId: prismaResource.categoryId,
      address,
      contact,
      status: prismaResource.status as any,
      plan: prismaResource.plan as any,
      verified: prismaResource.verified,
      seo,
      createdAt: prismaResource.createdAt,
      updatedAt: prismaResource.updatedAt,
      publishedAt: prismaResource.publishedAt,
      deletedAt: prismaResource.deletedAt,
    });
  }

  static toResponseDto(
    domain: ApiResourceDomain,
    category: Category,
    businessHours: BusinessHour[] = [],
    images: ResourceImage[] = []
  ): ApiResourceResponseDto {
    const dto = new ApiResourceResponseDto();
    dto.id = domain.id;
    dto.userId = domain.userId;
    dto.name = domain.name;
    dto.slug = domain.slug;
    dto.description = domain.description;
    dto.resourceType = domain.resourceType;
    dto.categoryId = domain.categoryId;
    dto.category = CategoryMapper.toResponseDto(category);
    dto.address = domain.address ? AddressMapper.toDto(domain.address) : undefined;
    dto.contact = domain.contact ? ContactMapper.toDto(domain.contact) : undefined;
    dto.status = domain.status;
    dto.plan = domain.plan;
    dto.verified = domain.verified;
    dto.seo = domain.seo ? SeoDataMapper.toDto(domain.seo) : undefined;
    dto.businessHours = BusinessHourMapper.toDtoArray(businessHours);
    dto.images = ResourceImageMapper.toDtoArray(images);
    dto.createdAt = domain.createdAt;
    dto.updatedAt = domain.updatedAt;
    dto.publishedAt = domain.publishedAt;
    return dto;
  }

  static toResponseDtoFromPrisma(prismaResource: ApiResourceWithRelations): ApiResourceResponseDto {
    const domain = this.toDomain(prismaResource);
    return this.toResponseDto(
      domain,
      prismaResource.category,
      prismaResource.hours || [],
      prismaResource.images || []
    );
  }

  static fromCreateDto(dto: CreateApiResourceDto, userId: string): ApiResourceDomain {
    const address = dto.address ? AddressMapper.toDomain(dto.address) : null;
    const contact = dto.contact ? ContactMapper.toDomain(dto.contact) : null;
    const seo = dto.seo ? SeoDataMapper.toDomain(dto.seo) : null;

    return ApiResourceDomain.create({
      id: '', // Will be generated by Prisma
      userId,
      name: dto.name,
      description: dto.description,
      resourceType: dto.resourceType,
      categoryId: dto.categoryId,
      address,
      contact,
      seo,
    });
  }

  static toPrismaCreate(domain: ApiResourceDomain): {
    userId: string;
    name: string;
    slug: string;
    description: string | null;
    resourceType: string;
    categoryId: string;
    addressLine1: string | null;
    addressLine2: string | null;
    city: string | null;
    region: string | null;
    postalCode: string | null;
    country: string;
    latitude: Decimal | null;
    longitude: Decimal | null;
    phone: string | null;
    email: string | null;
    website: string | null;
    status: string;
    plan: string;
    verified: boolean;
    metaTitle: string | null;
    metaDescription: string | null;
    publishedAt: Date | null;
  } {
    const addressData = domain.address ? AddressMapper.toPrisma(domain.address) : {
      addressLine1: null,
      addressLine2: null,
      city: null,
      region: null,
      postalCode: null,
      country: 'CM',
      latitude: null,
      longitude: null,
    };

    const contactData = domain.contact ? ContactMapper.toPrisma(domain.contact) : {
      phone: null,
      email: null,
      website: null,
    };

    const seoData = domain.seo ? SeoDataMapper.toPrisma(domain.seo) : {
      metaTitle: null,
      metaDescription: null,
    };

    return {
      userId: domain.userId,
      name: domain.name,
      slug: domain.slug,
      description: domain.description,
      resourceType: domain.resourceType,
      categoryId: domain.categoryId,
      ...addressData,
      ...contactData,
      status: domain.status,
      plan: domain.plan,
      verified: domain.verified,
      ...seoData,
      publishedAt: domain.publishedAt,
    };
  }

  static toPrismaUpdate(domain: ApiResourceDomain): Partial<{
    name: string;
    slug: string;
    description: string | null;
    resourceType: string;
    categoryId: string;
    addressLine1: string | null;
    addressLine2: string | null;
    city: string | null;
    region: string | null;
    postalCode: string | null;
    country: string;
    latitude: Decimal | null;
    longitude: Decimal | null;
    phone: string | null;
    email: string | null;
    website: string | null;
    status: string;
    plan: string;
    verified: boolean;
    metaTitle: string | null;
    metaDescription: string | null;
    publishedAt: Date | null;
    updatedAt: Date;
  }> {
    const addressData = domain.address ? AddressMapper.toPrisma(domain.address) : {
      addressLine1: null,
      addressLine2: null,
      city: null,
      region: null,
      postalCode: null,
      country: 'CM',
      latitude: null,
      longitude: null,
    };

    const contactData = domain.contact ? ContactMapper.toPrisma(domain.contact) : {
      phone: null,
      email: null,
      website: null,
    };

    const seoData = domain.seo ? SeoDataMapper.toPrisma(domain.seo) : {
      metaTitle: null,
      metaDescription: null,
    };

    return {
      name: domain.name,
      slug: domain.slug,
      description: domain.description,
      resourceType: domain.resourceType,
      categoryId: domain.categoryId,
      ...addressData,
      ...contactData,
      status: domain.status,
      plan: domain.plan,
      verified: domain.verified,
      ...seoData,
      publishedAt: domain.publishedAt,
      updatedAt: new Date(),
    };
  }

  static applyUpdateDto(domain: ApiResourceDomain, dto: UpdateApiResourceDto): ApiResourceDomain {
    let updatedDomain = domain;

    if (dto.name !== undefined) {
      updatedDomain = updatedDomain.withName(dto.name);
    }

    if (dto.status !== undefined) {
      updatedDomain = updatedDomain.withStatus(dto.status);
    }

    if (dto.plan !== undefined) {
      updatedDomain = updatedDomain.withPlan(dto.plan);
    }

    if (dto.verified !== undefined) {
      updatedDomain = updatedDomain.withVerified(dto.verified);
    }

    // Handle nested objects
    if (dto.address !== undefined) {
      const address = dto.address ? AddressMapper.toDomain(dto.address) : null;
      updatedDomain = new ApiResourceDomain(
        updatedDomain.id,
        updatedDomain.userId,
        updatedDomain.name,
        updatedDomain.slug,
        dto.description !== undefined ? dto.description : updatedDomain.description,
        dto.resourceType !== undefined ? dto.resourceType : updatedDomain.resourceType,
        dto.categoryId !== undefined ? dto.categoryId : updatedDomain.categoryId,
        address,
        updatedDomain.contact,
        updatedDomain.status,
        updatedDomain.plan,
        updatedDomain.verified,
        updatedDomain.seo,
        updatedDomain.createdAt,
        new Date(),
        updatedDomain.publishedAt,
        updatedDomain.deletedAt,
      );
    }

    if (dto.contact !== undefined) {
      const contact = dto.contact ? ContactMapper.toDomain(dto.contact) : null;
      updatedDomain = new ApiResourceDomain(
        updatedDomain.id,
        updatedDomain.userId,
        updatedDomain.name,
        updatedDomain.slug,
        dto.description !== undefined ? dto.description : updatedDomain.description,
        dto.resourceType !== undefined ? dto.resourceType : updatedDomain.resourceType,
        dto.categoryId !== undefined ? dto.categoryId : updatedDomain.categoryId,
        updatedDomain.address,
        contact,
        updatedDomain.status,
        updatedDomain.plan,
        updatedDomain.verified,
        updatedDomain.seo,
        updatedDomain.createdAt,
        new Date(),
        updatedDomain.publishedAt,
        updatedDomain.deletedAt,
      );
    }

    if (dto.seo !== undefined) {
      const seo = dto.seo ? SeoDataMapper.toDomain(dto.seo) : null;
      updatedDomain = new ApiResourceDomain(
        updatedDomain.id,
        updatedDomain.userId,
        updatedDomain.name,
        updatedDomain.slug,
        dto.description !== undefined ? dto.description : updatedDomain.description,
        dto.resourceType !== undefined ? dto.resourceType : updatedDomain.resourceType,
        dto.categoryId !== undefined ? dto.categoryId : updatedDomain.categoryId,
        updatedDomain.address,
        updatedDomain.contact,
        updatedDomain.status,
        updatedDomain.plan,
        updatedDomain.verified,
        seo,
        updatedDomain.createdAt,
        new Date(),
        updatedDomain.publishedAt,
        updatedDomain.deletedAt,
      );
    }

    return updatedDomain;
  }
}