/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Returns the health status of the API service with timestamp
         */
        get: operations["app_getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List API resources with pagination and filtering
         * @description Retrieve a paginated list of API resources with optional filtering by various criteria
         */
        get: operations["apiresource_findAll"];
        put?: never;
        /**
         * Create a new API resource
         * @description Create a new API resource with validation, enrichment, and automatic slug generation
         */
        post: operations["apiresource_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-resources/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search API resources
         * @description Advanced search functionality for API resources with full-text search and filtering
         */
        get: operations["apiresource_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-resources/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API resource by ID
         * @description Retrieve a specific API resource by its ID with caching for optimal performance
         */
        get: operations["apiresource_findById"];
        /**
         * Update an existing API resource
         * @description Update an API resource with validation and history preservation
         */
        put: operations["apiresource_update"];
        post?: never;
        /**
         * Delete an API resource
         * @description Soft delete an API resource (marks as deleted without removing from database)
         */
        delete: operations["apiresource_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-resources/ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk ingest API resources
         * @description Bulk import multiple API resources with validation, deduplication, and detailed error reporting
         */
        post: operations["apiresource_ingest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-resources/statistics/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API resources statistics
         * @description Retrieve statistical overview of API resources for dashboard purposes
         */
        get: operations["apiresource_getStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-resources/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API resources by user ID
         * @description Retrieve all API resources belonging to a specific user
         */
        get: operations["apiresource_findByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-resources/category/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API resources by category ID
         * @description Retrieve all API resources belonging to a specific category
         */
        get: operations["apiresource_findByCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api-resources/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get API resource by slug
         * @description Retrieve a specific API resource by its slug with caching for optimal performance
         */
        get: operations["apiresource_findBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all categories
         * @description Retrieve all categories in a flat list with optional hierarchical structure
         */
        get: operations["category_findAll"];
        put?: never;
        /**
         * Create a new category
         * @description Create a new category with hierarchical support (admin only)
         */
        post: operations["category_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search categories
         * @description Search categories by name or description
         */
        get: operations["category_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get category statistics
         * @description Retrieve statistical overview of categories
         */
        get: operations["category_getStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get category by ID
         * @description Retrieve a specific category by its ID
         */
        get: operations["category_findById"];
        /**
         * Update an existing category
         * @description Update a category with validation and hierarchy management (admin only)
         */
        put: operations["category_update"];
        post?: never;
        /**
         * Delete a category
         * @description Delete a category (only if it has no children or associated resources) (admin only)
         */
        delete: operations["category_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get category by slug
         * @description Retrieve a specific category by its slug
         */
        get: operations["category_findBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{id}/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get category children
         * @description Retrieve all direct children of a category
         */
        get: operations["category_getChildren"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{id}/path": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get category path
         * @description Retrieve the full path (breadcrumb) from root to the specified category
         */
        get: operations["category_getCategoryPath"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ResourceTypeDto: {
            /**
             * @description Type of API resource
             * @example BUSINESS
             * @enum {string}
             */
            value: "BUSINESS" | "SERVICE" | "DATA" | "API";
        };
        ResourceStatusDto: {
            /**
             * @description Status of API resource
             * @example ACTIVE
             * @enum {string}
             */
            value: "ACTIVE" | "PENDING" | "SUSPENDED";
        };
        ResourcePlanDto: {
            /**
             * @description Plan type for API resource
             * @example FREE
             * @enum {string}
             */
            value: "FREE" | "PREMIUM" | "FEATURED";
        };
        UserTypeDto: {
            /**
             * @description Type of user account
             * @example INDIVIDUAL
             * @enum {string}
             */
            value: "INDIVIDUAL" | "BUSINESS" | "ADMIN";
        };
        PlanDto: {
            /**
             * @description User subscription plan
             * @example FREE
             * @enum {string}
             */
            value: "FREE" | "PRO" | "PREMIUM" | "ENTERPRISE";
        };
        PricingTierDto: {
            /**
             * @description Pricing tier for services
             * @example STANDARD
             * @enum {string}
             */
            value: "STANDARD" | "BUSINESS" | "ENTERPRISE";
        };
        CategoryResponseDto: {
            /**
             * @description Category ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Category name
             * @example Restaurants
             */
            name: string;
            /**
             * @description Category slug
             * @example restaurants
             */
            slug: string;
            /**
             * @description Category description
             * @example Food and dining establishments
             */
            description?: string;
            /**
             * @description Category icon
             * @example restaurant
             */
            icon?: string;
            /**
             * @description Parent category ID
             * @example 456e7890-e89b-12d3-a456-426614174000
             */
            parentId?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
        };
        AddressDto: {
            /**
             * @description Primary address line
             * @example 123 Main Street
             */
            addressLine1?: string;
            /**
             * @description Secondary address line (apartment, suite, etc.)
             * @example Apt 4B
             */
            addressLine2?: string;
            /**
             * @description City name
             * @example Yaoundé
             */
            city?: string;
            /**
             * @description Region or state
             * @example Centre
             */
            region?: string;
            /**
             * @description Postal code
             * @example 00237
             */
            postalCode?: string;
            /**
             * @description Country code (ISO 3166-1 alpha-2)
             * @default CM
             * @example CM
             */
            country: string;
            /**
             * @description Latitude coordinate
             * @example 3.848
             */
            latitude?: number;
            /**
             * @description Longitude coordinate
             * @example 11.502
             */
            longitude?: number;
        };
        ContactDto: {
            /**
             * @description Phone number
             * @example +237123456789
             */
            phone?: string;
            /**
             * @description Email address
             * @example contact@example.com
             */
            email?: string;
            /**
             * @description Website URL
             * @example https://www.example.com
             */
            website?: string;
        };
        SeoDataDto: {
            /**
             * @description Meta title for SEO (recommended: 10-60 characters)
             * @example Best Restaurant in Yaoundé - ROMAPI
             */
            metaTitle?: string;
            /**
             * @description Meta description for SEO (recommended: 50-160 characters)
             * @example Discover the best restaurant in Yaoundé with authentic local cuisine and excellent service.
             */
            metaDescription?: string;
        };
        BusinessHourDto: {
            /**
             * @description Day of week (0=Sunday, 1=Monday, ..., 6=Saturday)
             * @example 1
             */
            dayOfWeek: number;
            /**
             * @description Opening time in HH:MM format
             * @example 08:00
             */
            openTime?: string;
            /**
             * @description Closing time in HH:MM format
             * @example 18:00
             */
            closeTime?: string;
            /**
             * @description Whether the business is closed on this day
             * @default false
             * @example false
             */
            isClosed: boolean;
        };
        ResourceImageDto: {
            /**
             * @description Image ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Image URL
             * @example https://example.com/images/restaurant.jpg
             */
            url: string;
            /**
             * @description Alternative text for accessibility
             * @example Restaurant interior with modern decor
             */
            altText?: string;
            /**
             * @description Whether this is the primary image
             * @default false
             * @example true
             */
            isPrimary: boolean;
            /**
             * @description Display order index
             * @default 0
             * @example 0
             */
            orderIndex: number;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
        };
        ApiResourceResponseDto: {
            /**
             * @description Resource ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description User ID who owns this resource
             * @example 456e7890-e89b-12d3-a456-426614174000
             */
            userId: string;
            /**
             * @description Resource name
             * @example Restaurant Le Palais
             */
            name: string;
            /**
             * @description Resource slug
             * @example restaurant-le-palais
             */
            slug: string;
            /**
             * @description Resource description
             * @example Authentic Cameroonian cuisine in the heart of Yaoundé
             */
            description?: string;
            /**
             * @description Type of resource
             * @example BUSINESS
             * @enum {string}
             */
            resourceType: "BUSINESS" | "SERVICE" | "DATA" | "API";
            /**
             * @description Category ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            categoryId: string;
            /** @description Category information */
            category: components["schemas"]["CategoryResponseDto"];
            /** @description Address information */
            address?: components["schemas"]["AddressDto"];
            /** @description Contact information */
            contact?: components["schemas"]["ContactDto"];
            /**
             * @description Resource status
             * @example ACTIVE
             * @enum {string}
             */
            status: "ACTIVE" | "PENDING" | "SUSPENDED";
            /**
             * @description Resource plan
             * @example FREE
             * @enum {string}
             */
            plan: "FREE" | "PREMIUM" | "FEATURED";
            /**
             * @description Whether the resource is verified
             * @example false
             */
            verified: boolean;
            /** @description SEO metadata */
            seo?: components["schemas"]["SeoDataDto"];
            /** @description Business hours */
            businessHours: components["schemas"]["BusinessHourDto"][];
            /** @description Resource images */
            images: components["schemas"]["ResourceImageDto"][];
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
            /**
             * Format: date-time
             * @description Publication timestamp
             * @example 2024-01-15T10:30:00Z
             */
            publishedAt?: string;
        };
        CreateResourceImageDto: {
            /**
             * @description Image URL
             * @example https://example.com/images/restaurant.jpg
             */
            url: string;
            /**
             * @description Alternative text for accessibility
             * @example Restaurant interior with modern decor
             */
            altText?: string;
            /**
             * @description Whether this is the primary image
             * @default false
             * @example true
             */
            isPrimary: boolean;
            /**
             * @description Display order index
             * @default 0
             * @example 0
             */
            orderIndex: number;
        };
        CreateApiResourceDto: {
            /**
             * @description Resource name - must be unique and descriptive
             * @example Restaurant Le Palais
             */
            name: string;
            /**
             * @description Detailed description of the resource - supports markdown formatting
             * @example Authentic Cameroonian cuisine in the heart of Yaoundé. We offer traditional dishes prepared with fresh local ingredients, creating an unforgettable dining experience.
             */
            description?: string;
            /**
             * @description Type of resource
             * @example BUSINESS
             * @enum {string}
             */
            resourceType: "BUSINESS" | "SERVICE" | "DATA" | "API";
            /**
             * @description Category ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            categoryId: string;
            /** @description Address information */
            address?: components["schemas"]["AddressDto"];
            /** @description Contact information */
            contact?: components["schemas"]["ContactDto"];
            /** @description SEO metadata */
            seo?: components["schemas"]["SeoDataDto"];
            /** @description Business hours */
            businessHours?: components["schemas"]["BusinessHourDto"][];
            /** @description Resource images */
            images?: components["schemas"]["CreateResourceImageDto"][];
        };
        UpdateApiResourceDto: {
            /**
             * @description Resource name - must be unique and descriptive
             * @example Restaurant Le Palais
             */
            name?: string;
            /**
             * @description Detailed description of the resource - supports markdown formatting
             * @example Authentic Cameroonian cuisine in the heart of Yaoundé. We offer traditional dishes prepared with fresh local ingredients, creating an unforgettable dining experience.
             */
            description?: string;
            /**
             * @description Type of resource
             * @example BUSINESS
             * @enum {string}
             */
            resourceType?: "BUSINESS" | "SERVICE" | "DATA" | "API";
            /**
             * @description Category ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            categoryId?: string;
            /** @description Address information */
            address?: components["schemas"]["AddressDto"];
            /** @description Contact information */
            contact?: components["schemas"]["ContactDto"];
            /** @description SEO metadata */
            seo?: components["schemas"]["SeoDataDto"];
            /** @description Business hours */
            businessHours?: components["schemas"]["BusinessHourDto"][];
            /** @description Resource images */
            images?: components["schemas"]["CreateResourceImageDto"][];
            /**
             * @description Resource slug
             * @example restaurant-le-palais
             */
            slug?: string;
            /**
             * @description Resource status
             * @example ACTIVE
             * @enum {string}
             */
            status?: "ACTIVE" | "PENDING" | "SUSPENDED";
            /**
             * @description Resource plan
             * @example PREMIUM
             * @enum {string}
             */
            plan?: "FREE" | "PREMIUM" | "FEATURED";
            /**
             * @description Whether the resource is verified
             * @example true
             */
            verified?: boolean;
        };
        IngestApiResourcesDto: {
            /**
             * @description Array of API resources to ingest
             * @example [
             *       {
             *         "name": "Restaurant Le Palais",
             *         "description": "Authentic Cameroonian cuisine",
             *         "resourceType": "BUSINESS",
             *         "categoryId": "123e4567-e89b-12d3-a456-426614174000",
             *         "address": {
             *           "addressLine1": "123 Main Street",
             *           "city": "Yaoundé",
             *           "country": "CM"
             *         }
             *       }
             *     ]
             */
            resources: components["schemas"]["CreateApiResourceDto"][];
            /**
             * @description Whether to skip validation errors and continue with valid resources
             * @default false
             * @example true
             */
            skipErrors: boolean;
            /**
             * @description Whether to skip duplicate resources (based on name similarity)
             * @default true
             * @example true
             */
            skipDuplicates: boolean;
            /**
             * @description Batch size for processing (max 100)
             * @default 50
             * @example 50
             */
            batchSize: number;
        };
        IngestItemResultDto: {
            /**
             * @description Index of the resource in the original array
             * @example 0
             */
            index: number;
            /**
             * @description Original resource name from the request
             * @example Restaurant Le Palais
             */
            name: string;
            /**
             * @description Processing status
             * @example success
             * @enum {string}
             */
            status: "success" | "failed" | "skipped";
            /**
             * @description ID of the created resource (if successful)
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            resourceId?: string;
            /**
             * @description Generated slug (if successful)
             * @example restaurant-le-palais
             */
            slug?: string;
            /**
             * @description Error message (if failed)
             * @example Validation failed: Category ID is required
             */
            error?: string;
            /**
             * @description Error type for categorization
             * @example validation_error
             */
            errorType?: string;
            /**
             * @description Reason for skipping (if skipped)
             * @example Duplicate resource found with similar name
             */
            skipReason?: string;
            /**
             * @description Processing time for this item in milliseconds
             * @example 25
             */
            processingTimeMs: number;
        };
        IngestResultDto: {
            /**
             * @description Total number of resources in the request
             * @example 100
             */
            total: number;
            /**
             * @description Number of resources successfully processed
             * @example 85
             */
            processed: number;
            /**
             * @description Number of resources that failed validation or processing
             * @example 10
             */
            failed: number;
            /**
             * @description Number of resources skipped due to duplicates
             * @example 5
             */
            skipped: number;
            /**
             * @description Processing time in milliseconds
             * @example 2500
             */
            processingTimeMs: number;
            /** @description Detailed results for each resource */
            results: components["schemas"]["IngestItemResultDto"][];
            /**
             * @description Summary of errors by type
             * @example {
             *       "validation_error": 5,
             *       "duplicate_error": 3,
             *       "enrichment_error": 2
             *     }
             */
            errorSummary: Record<string, never>;
        };
        CategoryTreeResponseDto: {
            /**
             * @description Category ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Category name
             * @example Restaurants
             */
            name: string;
            /**
             * @description Category slug
             * @example restaurants
             */
            slug: string;
            /**
             * @description Category description
             * @example Food and dining establishments
             */
            description?: string;
            /**
             * @description Category icon
             * @example restaurant
             */
            icon?: string;
            /**
             * @description Parent category ID
             * @example 456e7890-e89b-12d3-a456-426614174000
             */
            parentId?: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /** @description Child categories */
            children?: components["schemas"]["CategoryTreeResponseDto"][];
            /** @description Parent category information */
            parent?: components["schemas"]["CategoryResponseDto"];
            /**
             * @description Category counts
             * @example {
             *       "children": 5,
             *       "apiResources": 25
             *     }
             */
            _count?: Record<string, never>;
        };
        CreateCategoryDto: {
            /**
             * @description Category name
             * @example Restaurants
             */
            name: string;
            /**
             * @description Category description
             * @example Food and dining establishments
             */
            description?: string;
            /**
             * @description Category icon identifier
             * @example restaurant
             */
            icon?: string;
            /**
             * @description Parent category ID for hierarchical structure
             * @example 456e7890-e89b-12d3-a456-426614174000
             */
            parentId?: string;
        };
        UpdateCategoryDto: {
            /**
             * @description Category name
             * @example Restaurants
             */
            name?: string;
            /**
             * @description Category description
             * @example Food and dining establishments
             */
            description?: string;
            /**
             * @description Category icon identifier
             * @example restaurant
             */
            icon?: string;
            /**
             * @description Parent category ID for hierarchical structure
             * @example 456e7890-e89b-12d3-a456-426614174000
             */
            parentId?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    app_getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy and operational */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: {
                            /** @example ROMAPI Backend Core is running! */
                            message?: string;
                            /** @example 2024-01-15T10:30:00Z */
                            timestamp?: string;
                            /** @example 1.0.0 */
                            version?: string;
                            /** @example development */
                            environment?: string;
                        };
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Service is unhealthy */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example false */
                        success?: boolean;
                        error?: {
                            /** @example SERVICE_UNHEALTHY */
                            code?: string;
                            /** @example Service is experiencing issues */
                            message?: string;
                            /** @example 2024-01-15T10:30:00Z */
                            timestamp?: string;
                        };
                    };
                };
            };
        };
    };
    apiresource_findAll: {
        parameters: {
            query: {
                /** @description Search query for name and description */
                search?: string;
                /** @description Filter by resource type */
                resourceType?: "BUSINESS" | "SERVICE" | "DATA" | "API";
                /** @description Filter by resource status */
                status?: "ACTIVE" | "PENDING" | "SUSPENDED";
                /** @description Filter by resource plan */
                plan?: "FREE" | "PREMIUM" | "FEATURED";
                /** @description Filter by category ID */
                categoryId?: string;
                /** @description Filter by city */
                city?: string;
                /** @description Filter by region */
                region?: string;
                /** @description Filter by country */
                country?: string;
                /** @description Filter by verified status */
                verified?: boolean;
                /** @description Latitude for location-based search */
                latitude?: number;
                /** @description Longitude for location-based search */
                longitude?: number;
                /** @description Radius in kilometers for location-based search */
                radius?: number;
                /** @description Number of items per page */
                limit: number;
                /** @description Number of items to skip */
                offset: number;
                /** @description Sort field */
                sortBy?: "name" | "createdAt" | "updatedAt" | "publishedAt";
                /** @description Sort order */
                sortOrder: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved API resources */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: {
                            resources?: components["schemas"]["ApiResourceResponseDto"][];
                            /** @example 150 */
                            total?: number;
                            /** @example 1 */
                            page?: number;
                            /** @example 8 */
                            totalPages?: number;
                            /** @example true */
                            hasNext?: boolean;
                            /** @example false */
                            hasPrev?: boolean;
                        };
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API Resource data to create */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiResourceDto"];
            };
        };
        responses: {
            /** @description Successfully created API resource */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResourceResponseDto"];
                };
            };
            /** @description Validation failed or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource with similar name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_search: {
        parameters: {
            query: {
                /** @description Search query for name and description */
                search?: string;
                /** @description Filter by resource type */
                resourceType?: "BUSINESS" | "SERVICE" | "DATA" | "API";
                /** @description Filter by resource status */
                status?: "ACTIVE" | "PENDING" | "SUSPENDED";
                /** @description Filter by resource plan */
                plan?: "FREE" | "PREMIUM" | "FEATURED";
                /** @description Filter by category ID */
                categoryId?: string;
                /** @description Filter by city */
                city?: string;
                /** @description Filter by region */
                region?: string;
                /** @description Filter by country */
                country?: string;
                /** @description Filter by verified status */
                verified?: boolean;
                /** @description Latitude for location-based search */
                latitude?: number;
                /** @description Longitude for location-based search */
                longitude?: number;
                /** @description Radius in kilometers for location-based search */
                radius?: number;
                /** @description Number of items per page */
                limit: number;
                /** @description Number of items to skip */
                offset: number;
                /** @description Sort field */
                sortBy?: "name" | "createdAt" | "updatedAt" | "publishedAt";
                /** @description Sort order */
                sortOrder: "asc" | "desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: {
                            resources?: components["schemas"]["ApiResourceResponseDto"][];
                            /** @example 25 */
                            total?: number;
                            /** @example 1 */
                            page?: number;
                            /** @example 2 */
                            totalPages?: number;
                            /** @example true */
                            hasNext?: boolean;
                            /** @example false */
                            hasPrev?: boolean;
                        };
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Invalid search parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API Resource ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved API resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResourceResponseDto"];
                };
            };
            /** @description Invalid UUID format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description API Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API Resource ID */
                id: string;
            };
            cookie?: never;
        };
        /** @description API Resource data to update */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateApiResourceDto"];
            };
        };
        responses: {
            /** @description Successfully updated API resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResourceResponseDto"];
                };
            };
            /** @description Validation failed or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - can only update own resources */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description API Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API Resource ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted API resource */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - can only delete own resources */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description API Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_ingest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Bulk API Resource data to ingest */
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngestApiResourcesDto"];
            };
        };
        responses: {
            /** @description Successfully processed bulk ingest */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IngestResultDto"];
                };
            };
            /** @description Validation failed or invalid batch data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Payload too large - reduce batch size */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_getStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: {
                            /** @example 1250 */
                            total?: number;
                            byStatus?: {
                                /** @example 980 */
                                ACTIVE?: number;
                                /** @example 200 */
                                PENDING?: number;
                                /** @example 70 */
                                SUSPENDED?: number;
                            };
                            byPlan?: {
                                /** @example 800 */
                                FREE?: number;
                                /** @example 350 */
                                PREMIUM?: number;
                                /** @example 100 */
                                FEATURED?: number;
                            };
                            byType?: {
                                /** @example 900 */
                                BUSINESS?: number;
                                /** @example 250 */
                                SERVICE?: number;
                                /** @example 80 */
                                DATA?: number;
                                /** @example 20 */
                                API?: number;
                            };
                            /** @example 45 */
                            recentCount?: number;
                        };
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_findByUserId: {
        parameters: {
            query?: {
                /** @description Number of items per page */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description User ID */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved user API resources */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: {
                            resources?: components["schemas"]["ApiResourceResponseDto"][];
                            /** @example 15 */
                            total?: number;
                            /** @example 1 */
                            page?: number;
                            /** @example 1 */
                            totalPages?: number;
                            /** @example false */
                            hasNext?: boolean;
                            /** @example false */
                            hasPrev?: boolean;
                        };
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Invalid user ID format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_findByCategory: {
        parameters: {
            query?: {
                /** @description Number of items per page */
                limit?: number;
                /** @description Number of items to skip */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description Category ID */
                categoryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved category API resources */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: {
                            resources?: components["schemas"]["ApiResourceResponseDto"][];
                            /** @example 85 */
                            total?: number;
                            /** @example 1 */
                            page?: number;
                            /** @example 5 */
                            totalPages?: number;
                            /** @example true */
                            hasNext?: boolean;
                            /** @example false */
                            hasPrev?: boolean;
                        };
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Invalid category ID format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiresource_findBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API Resource slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved API resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResourceResponseDto"];
                };
            };
            /** @description API Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_findAll: {
        parameters: {
            query?: {
                /** @description Return categories in hierarchical tree structure */
                tree?: boolean;
                /** @description Return only root categories (no parent) */
                rootsOnly?: boolean;
                /** @description Include children when rootsOnly=true */
                includeChildren?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved categories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: components["schemas"]["CategoryResponseDto"][];
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Category data to create */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDto"];
            };
        };
        responses: {
            /** @description Successfully created category */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponseDto"];
                };
            };
            /** @description Validation failed or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category with similar name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_search: {
        parameters: {
            query: {
                /** @description Search query */
                q: string;
                /** @description Maximum number of results */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved search results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: components["schemas"]["CategoryResponseDto"][];
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Missing or invalid search query */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_getStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: {
                            /** @example 45 */
                            total?: number;
                            /** @example 8 */
                            rootCategories?: number;
                            /** @example 3 */
                            maxDepth?: number;
                            /** @example 12.5 */
                            avgResourcesPerCategory?: number;
                        };
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponseDto"];
                };
            };
            /** @description Invalid UUID format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                id: string;
            };
            cookie?: never;
        };
        /** @description Category data to update */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryDto"];
            };
        };
        responses: {
            /** @description Successfully updated category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponseDto"];
                };
            };
            /** @description Validation failed or invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category with similar name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted category */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot delete category with children or resources */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - admin access required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_findBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponseDto"];
                };
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_getChildren: {
        parameters: {
            query?: {
                /** @description Include grandchildren in the response */
                includeGrandchildren?: boolean;
            };
            header?: never;
            path: {
                /** @description Parent category ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved category children */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryTreeResponseDto"][];
                };
            };
            /** @description Invalid UUID format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Parent category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    category_getCategoryPath: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved category path */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        data?: components["schemas"]["CategoryResponseDto"][];
                        /** @example 2024-01-15T10:30:00Z */
                        timestamp?: string;
                    };
                };
            };
            /** @description Invalid UUID format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Category not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
